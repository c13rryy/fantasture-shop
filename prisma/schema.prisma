generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  ACTIVE_ONE
  ACTIVE_TWO
  ACTIVE_THREE
  ACTIVE_FOUR
  ACTIVE_FIVE
}

enum CommentVoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  username      String?        @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  Comment       Comment[]
  CommentVote   CommentVote[]
  votes         Vote[]
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sizeValue String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Product {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  categories      Category       @relation(fields: [categoryId], references: [id])
  categoryId      String         @db.ObjectId
  name            String         @unique
  description     String
  fullDescription String?
  imageUrl        String
  raiting         Float?
  price           String
  discount        String?
  subscribers     Subscription[]
  comments        Comment[]
  votes           Vote[]
  sizeIds         String[]       @db.ObjectId
  colorIds        String[]       @db.ObjectId
  orderItems      OrderItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  type      VoteType
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId

  replyToId String?       @db.ObjectId
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]

  commentId String?
}

model CommentVote {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  comment   Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String          @db.ObjectId
  type      CommentVoteType
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  items         OrderItem[]
  isPaid        Boolean     @default(false)
  totalPrice    Float       @default(0)
  phone         String      @default("")
  address       String      @default("")
  orderQuantity Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  quantity  Int
}
